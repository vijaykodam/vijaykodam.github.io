<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Vijay Kodam</title>
    <link>http://localhost:1313/tags/javascript/</link>
    <description>Recent content in Javascript on Vijay Kodam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Mar 2025 23:28:14 +0200</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Decibel Meter</title>
      <link>http://localhost:1313/projects/decibel-meter/</link>
      <pubDate>Wed, 12 Mar 2025 23:28:14 +0200</pubDate>
      
      <guid>http://localhost:1313/projects/decibel-meter/</guid>
      <description>&lt;div class=&#34;decibel-meter-wrapper&#34;&gt;
    &lt;div class=&#34;speedometer-container&#34;&gt;
        
        &lt;div class=&#34;needle-container&#34;&gt;
            &lt;div class=&#34;needle&#34; id=&#34;needle&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;needle-center&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;reading&#34; id=&#34;reading&#34;&gt;0 dB&lt;/div&gt;
    &lt;div class=&#34;description&#34; id=&#34;description&#34;&gt;Please enable microphone&lt;/div&gt;
    
    &lt;button id=&#34;startButton&#34;&gt;Start Measuring&lt;/button&gt;
    
    &lt;div class=&#34;sensitivity-control&#34;&gt;
        &lt;label for=&#34;sensitivity&#34;&gt;Microphone Sensitivity: &lt;span id=&#34;sensitivityValue&#34;&gt;&lt;/span&gt;&lt;/label&gt;
        &lt;input type=&#34;range&#34; id=&#34;sensitivity&#34; min=&#34;1&#34; max=&#34;5&#34; step=&#34;0.5&#34; value=&#34;2.0&#34;&gt;
    &lt;/div&gt;
    
    &lt;div class=&#34;error&#34; id=&#34;errorMessage&#34;&gt;&lt;/div&gt;
    
    
    &lt;div class=&#34;child-voice-legend&#34;&gt;
        &lt;div class=&#34;child-voice-title&#34;&gt;Voice Level Guide for Kids&lt;/div&gt;
        &lt;div class=&#34;voice-level-item&#34;&gt;
            &lt;div class=&#34;voice-level-color&#34; style=&#34;background: #4CAF50;&#34;&gt;&lt;/div&gt;
            &lt;span class=&#34;voice-level-text&#34;&gt;Whisper to Library Voice (0-40 dB)&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&#34;voice-level-item&#34;&gt;
            &lt;div class=&#34;voice-level-color&#34; style=&#34;background: #7CB342;&#34;&gt;&lt;/div&gt;
            &lt;span class=&#34;voice-level-text&#34;&gt;Indoor Voice (40-60 dB)&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&#34;voice-level-item&#34;&gt;
            &lt;div class=&#34;voice-level-color&#34; style=&#34;background: #FFC107;&#34;&gt;&lt;/div&gt;
            &lt;span class=&#34;voice-level-text&#34;&gt;Classroom Voice (60-70 dB)&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&#34;voice-level-item&#34;&gt;
            &lt;div class=&#34;voice-level-color&#34; style=&#34;background: #FF9800;&#34;&gt;&lt;/div&gt;
            &lt;span class=&#34;voice-level-text&#34;&gt;Playground Voice (70-80 dB)&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&#34;voice-level-item&#34;&gt;
            &lt;div class=&#34;voice-level-color&#34; style=&#34;background: #FF5722;&#34;&gt;&lt;/div&gt;
            &lt;span class=&#34;voice-level-text&#34;&gt;Too Loud! (80+ dB)&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    
&lt;/div&gt;

&lt;script src=&#34;http://localhost:1313/js/decibel-meter.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;http://localhost:1313/css/decibel-meter.css&#34;&gt;

&lt;ul&gt;
&lt;li&gt;No data is stored or transmitted - all processing happens locally in your browser.&lt;/li&gt;
&lt;li&gt;dB values are approximate. Calibration has not been done.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Classic Snake Game</title>
      <link>http://localhost:1313/projects/snake-game/</link>
      <pubDate>Sun, 16 Feb 2025 19:58:58 +0200</pubDate>
      
      <guid>http://localhost:1313/projects/snake-game/</guid>
      <description>

&lt;style&gt;
    .game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 20px auto;
        max-width: 100%;
    }

    .game-title {
        font-size: 36px;
        font-weight: bold;
        margin-bottom: 20px;
        text-align: center;
        font-family: Arial, sans-serif;
    }

    .speed-selector {
        margin: 10px 0;
        padding: 10px;
        display: flex;
        gap: 10px;
        justify-content: center;
    }

    .speed-btn {
        padding: 8px 16px;
        border: 2px solid #333;
        border-radius: 5px;
        background: white;
        cursor: pointer;
        font-family: Arial, sans-serif;
        transition: all 0.3s ease;
    }

    .speed-btn.active {
        background: #333;
        color: white;
    }

    #gameCanvas {
        border: 2px solid #333;
        background: #f0f0f0;
        max-width: 100%;
        touch-action: none;
    }

    .controls {
        display: none;
        margin-top: 20px;
        touch-action: none;
    }

    @media (max-width: 768px) {
        .controls {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            width: 200px;
        }

        .control-btn {
            padding: 15px;
            background: #333;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            touch-action: none;
        }

        .control-btn:active {
            background: #555;
        }

        #up { grid-column: 2; grid-row: 1; }
        #left { grid-column: 1; grid-row: 2; }
        #right { grid-column: 3; grid-row: 2; }
        #down { grid-column: 2; grid-row: 3; }
    }

    .score {
        font-size: 24px;
        margin: 10px 0;
        font-family: Arial, sans-serif;
    }

    .game-over {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        z-index: 1000;
    }

    .restart-btn {
        margin-top: 10px;
        padding: 10px 20px;
        background: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .restart-btn:hover {
        background: #45a049;
    }
&lt;/style&gt;

&lt;div class=&#34;game-container&#34;&gt;
    &lt;div class=&#34;speed-selector&#34;&gt;
        &lt;button class=&#34;speed-btn&#34; data-speed=&#34;slow&#34;&gt;Slow&lt;/button&gt;
        &lt;button class=&#34;speed-btn active&#34; data-speed=&#34;normal&#34;&gt;Normal&lt;/button&gt;
        &lt;button class=&#34;speed-btn&#34; data-speed=&#34;fast&#34;&gt;Fast&lt;/button&gt;
    &lt;/div&gt;
    &lt;div class=&#34;score&#34;&gt;Score: &lt;span id=&#34;scoreValue&#34;&gt;0&lt;/span&gt;&lt;/div&gt;
    &lt;canvas id=&#34;gameCanvas&#34; width=&#34;400&#34; height=&#34;400&#34;&gt;&lt;/canvas&gt;
    &lt;div class=&#34;controls&#34;&gt;
        &lt;button id=&#34;up&#34; class=&#34;control-btn&#34;&gt;↑&lt;/button&gt;
        &lt;button id=&#34;left&#34; class=&#34;control-btn&#34;&gt;←&lt;/button&gt;
        &lt;button id=&#34;right&#34; class=&#34;control-btn&#34;&gt;→&lt;/button&gt;
        &lt;button id=&#34;down&#34; class=&#34;control-btn&#34;&gt;↓&lt;/button&gt;
    &lt;/div&gt;
    &lt;div class=&#34;game-over&#34; id=&#34;gameOver&#34;&gt;
        &lt;h2&gt;Game Over!&lt;/h2&gt;
        &lt;p&gt;Final Score: &lt;span id=&#34;finalScore&#34;&gt;0&lt;/span&gt;&lt;/p&gt;
        &lt;button class=&#34;restart-btn&#34; onclick=&#34;restartGame()&#34;&gt;Play Again&lt;/button&gt;
    &lt;/div&gt;
    &lt;p&gt;This classic snake game has been created using Anthropic Claude in a single prompt on 16 Feb 2025. Documenting it for future reference to track the speed of development in GenAI/LLMs. &lt;/p&gt;
&lt;/div&gt;

&lt;script&gt;
    (function() {
        const canvas = document.getElementById(&#39;gameCanvas&#39;);
        const ctx = canvas.getContext(&#39;2d&#39;);
        const scoreElement = document.getElementById(&#39;scoreValue&#39;);
        const finalScoreElement = document.getElementById(&#39;finalScore&#39;);
        const gameOverElement = document.getElementById(&#39;gameOver&#39;);
        const speedButtons = document.querySelectorAll(&#39;.speed-btn&#39;);

        const gridSize = 20;
        const tileCount = canvas.width / gridSize;

        let snake = [{ x: 10, y: 10 }];
        let food = { x: 15, y: 15 };
        let dx = 0;
        let dy = 0;
        let score = 0;
        let gameLoop;
        
        const speeds = {
            slow: 150,
            normal: 100,
            fast: 70
        };
        let currentSpeed = speeds.normal;
        let baseSpeed = speeds.normal;

        function setSpeed(speedType) {
            baseSpeed = speeds[speedType];
            currentSpeed = baseSpeed;
            if (gameLoop) {
                clearInterval(gameLoop);
                gameLoop = setInterval(drawGame, currentSpeed);
            }
            
            speedButtons.forEach(btn =&gt; {
                btn.classList.remove(&#39;active&#39;);
                if (btn.dataset.speed === speedType) {
                    btn.classList.add(&#39;active&#39;);
                }
            });
        }

        speedButtons.forEach(button =&gt; {
            button.addEventListener(&#39;click&#39;, () =&gt; {
                setSpeed(button.dataset.speed);
            });
        });

        function drawGame() {
            clearCanvas();
            moveSnake();
            checkCollision();
            drawFood();
            drawSnake();
        }

        function clearCanvas() {
            ctx.fillStyle = &#39;#f0f0f0&#39;;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }

        function drawSnake() {
            ctx.fillStyle = &#39;#4CAF50&#39;;
            snake.forEach(segment =&gt; {
                ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize - 2, gridSize - 2);
            });
        }

        function drawFood() {
            ctx.fillStyle = &#39;#FF0000&#39;;
            ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 2, gridSize - 2);
        }

        function moveSnake() {
            const head = { x: snake[0].x + dx, y: snake[0].y + dy };
            snake.unshift(head);

            if (head.x === food.x &amp;&amp; head.y === food.y) {
                score += 10;
                scoreElement.textContent = score;
                generateFood();
                increaseSpeed();
            } else {
                snake.pop();
            }
        }

        function generateFood() {
            food = {
                x: Math.floor(Math.random() * tileCount),
                y: Math.floor(Math.random() * tileCount)
            };
            if (snake.some(segment =&gt; segment.x === food.x &amp;&amp; segment.y === food.y)) {
                generateFood();
            }
        }

        function checkCollision() {
            const head = snake[0];

            if (head.x &lt; 0 || head.x &gt;= tileCount || head.y &lt; 0 || head.y &gt;= tileCount) {
                gameOver();
            }

            for (let i = 1; i &lt; snake.length; i++) {
                if (head.x === snake[i].x &amp;&amp; head.y === snake[i].y) {
                    gameOver();
                }
            }
        }

        function gameOver() {
            clearInterval(gameLoop);
            finalScoreElement.textContent = score;
            gameOverElement.style.display = &#39;block&#39;;
        }

        window.restartGame = function() {
            snake = [{ x: 10, y: 10 }];
            food = { x: 15, y: 15 };
            dx = 0;
            dy = 0;
            score = 0;
            currentSpeed = baseSpeed;
            scoreElement.textContent = &#39;0&#39;;
            gameOverElement.style.display = &#39;none&#39;;
            gameLoop = setInterval(drawGame, currentSpeed);
        }

        function increaseSpeed() {
            if (currentSpeed &gt; baseSpeed * 0.5) {
                clearInterval(gameLoop);
                currentSpeed -= 2;
                gameLoop = setInterval(drawGame, currentSpeed);
            }
        }

        document.addEventListener(&#39;keydown&#39;, (event) =&gt; {
            switch(event.key) {
                case &#39;ArrowUp&#39;:
                    if (dy === 0) { dx = 0; dy = -1; }
                    break;
                case &#39;ArrowDown&#39;:
                    if (dy === 0) { dx = 0; dy = 1; }
                    break;
                case &#39;ArrowLeft&#39;:
                    if (dx === 0) { dx = -1; dy = 0; }
                    break;
                case &#39;ArrowRight&#39;:
                    if (dx === 0) { dx = 1; dy = 0; }
                    break;
            }
        });

        const controlButtons = document.querySelectorAll(&#39;.control-btn&#39;);
        controlButtons.forEach(button =&gt; {
            button.addEventListener(&#39;touchstart&#39;, (e) =&gt; {
                e.preventDefault();
                switch(button.id) {
                    case &#39;up&#39;:
                        if (dy === 0) { dx = 0; dy = -1; }
                        break;
                    case &#39;down&#39;:
                        if (dy === 0) { dx = 0; dy = 1; }
                        break;
                    case &#39;left&#39;:
                        if (dx === 0) { dx = -1; dy = 0; }
                        break;
                    case &#39;right&#39;:
                        if (dx === 0) { dx = 1; dy = 0; }
                        break;
                }
            });
        });

        gameLoop = setInterval(drawGame, currentSpeed);
    })();
&lt;/script&gt;


</description>
    </item>
    
  </channel>
</rss>
